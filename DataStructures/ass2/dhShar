#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.7).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `#!/bin/sh' line above, then type `sh FILE'.
#
lock_dir=_sh26880
# Made on 2015-01-29 18:40 EST by <n00814425@osprey.unfcsd.unf.edu>.
# Source directory was `/home/25/n00814425/ds/ass21'.
#
# Existing files will *not* be overwritten, unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#   1757 -rw-r--r-- n00814425.c
#    140 -rw-r--r-- my.h
#    176 -rw-r--r-- swap.c
#
MD5SUM=${MD5SUM-md5sum}
f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'`
test -n "${f}" && md5check=true || md5check=false
${md5check} || \
  echo 'Note: not verifying md5sums.  Consider installing GNU coreutils.'
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    case `$dir/gettext --version 2>&1 | sed 1q` in
      *GNU*) gettext_dir=$dir ;;
    esac
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null
then if (echo -n test; echo 1,2,3) | grep n >/dev/null
     then shar_n= shar_c='
'
     else shar_n=-n shar_c= ; fi
else shar_n= shar_c='\c' ; fi
f=shar-touch.$$
st1=200112312359.59
st2=123123592001.59
st2tr=123123592001.5 # old SysV 14-char limit
st3=1231235901

if touch -am -t ${st1} ${f} >/dev/null 2>&1 && \
   test ! -f ${st1} && test -f ${f}; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'

elif touch -am ${st2} ${f} >/dev/null 2>&1 && \
   test ! -f ${st2} && test ! -f ${st2tr} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'

elif touch -am ${st3} ${f} >/dev/null 2>&1 && \
   test ! -f ${st3} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'

else
  shar_touch=:
  echo
  ${echo} 'WARNING: not restoring timestamps.  Consider getting and'
  ${echo} 'installing GNU `touch'\'', distributed in GNU coreutils...'
  echo
fi
rm -f ${st1} ${st2} ${st2tr} ${st3} ${f}
#
if test ! -d ${lock_dir}
then : ; else ${echo} 'lock directory '${lock_dir}' exists'
  exit 1
fi
if mkdir ${lock_dir}
then ${echo} 'x - created lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to create lock directory `'${lock_dir}\''.'
  exit 1
fi
# ============= n00814425.c ==============
if test -f 'n00814425.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING n00814425.c (file already exists)'
else
${echo} 'x - extracting n00814425.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'n00814425.c' &&
X
#include "my.h"
X
main( int argc, char** argv)
{
X    int* numberArray;
X    int i,j;			// For loop counters
X    int arraySize;		// First data in and is size of the array		
X    int call = 0;		// Gives array loctaion when user asks for it
X    int counter = 0; 	// counts total number of loops it took to sort array
X    bool check = 1; 	// Runs while loop until counter stops.
X    
X    FILE *myFile;
X    myFile = fopen(argv[1], "r+");
X
X	fscanf(myFile, "%d", &arraySize);
X	
X	numberArray = 	(int*)calloc (arraySize,sizeof(int));
X	
X    for (i = 0; i < arraySize; i++)
X    {
X        fscanf(myFile, "%d", &numberArray[i]);
X    }
X    
X	fclose(myFile);
X    /////////////////////////////////Files scanned in
X    
X    
X    while (check != 0){
X    	check = 0;
X        for (i = 1; i < arraySize; i+=2){
X        	if (i+1 >= arraySize){			//if end of array break
X				break;
X				}
X			if ( numberArray[i] > numberArray [i+1] ){
X        		swap(numberArray , i);
X        		check = 1;
X        		counter++;
X			}
X    	}
X
X    	for (j = 0; j < arraySize; j+=2){
X    		if (j+1 >= arraySize){
X					break;
X				}
X        	if ( numberArray[j] > numberArray [j+1] ){
X        		swap(numberArray , j);
X        		check = 1;
X        		counter++;
X			}
X    	}	
X    }
X    
X  	//printf("There were %d swaps made\n\n", counter);  
X
X    /////////////////////////////////////////////// Poke at array
X    while (call != -1){
X    	printf("\nWhich index would you like to look or -1 to exit: ");
X    	scanf("%d", &call);
X    	if (call > arraySize){
X    		printf("\nTry again!\n");			//error check
X    	}
X    	if ((call != -1) && (call <= arraySize)){
X    	printf(" %d\n", numberArray[call]);		//print
X    	} 
X    }
X    	
X	return 0;
}
SHAR_EOF
  (set 20 15 01 29 18 35 55 'n00814425.c'; eval "$shar_touch") &&
  chmod 0644 'n00814425.c'
if test $? -ne 0
then ${echo} 'restore of n00814425.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'n00814425.c: MD5 check failed'
       ) << \SHAR_EOF
d2cdc192dd2d8acb4e41f58da878e442  n00814425.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'n00814425.c'` -ne 1757 && \
  ${echo} 'restoration warning:  size of n00814425.c is not 1757'
  fi
fi
# ============= my.h ==============
if test -f 'my.h' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING my.h (file already exists)'
else
${echo} 'x - extracting my.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'my.h' &&
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
X
void swap (int array[], int num);	//swaps higher or lower number in array
SHAR_EOF
  (set 20 15 01 29 18 16 03 'my.h'; eval "$shar_touch") &&
  chmod 0644 'my.h'
if test $? -ne 0
then ${echo} 'restore of my.h failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'my.h: MD5 check failed'
       ) << \SHAR_EOF
331097624dd03a1448877789029d738e  my.h
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'my.h'` -ne 140 && \
  ${echo} 'restoration warning:  size of my.h is not 140'
  fi
fi
# ============= swap.c ==============
if test -f 'swap.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING swap.c (file already exists)'
else
${echo} 'x - extracting swap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'swap.c' &&
#include "my.h"
X
void swap (int array[], int num){   // swaps higher and lower value
X	int temp;
X	temp = array[num];
X	array[num] = array[num+1];
X	array[num+1] = temp;
}
SHAR_EOF
  (set 20 15 01 29 17 46 01 'swap.c'; eval "$shar_touch") &&
  chmod 0644 'swap.c'
if test $? -ne 0
then ${echo} 'restore of swap.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'swap.c: MD5 check failed'
       ) << \SHAR_EOF
9da2ada8acde462069c4c51ab34cbd51  swap.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'swap.c'` -ne 176 && \
  ${echo} 'restoration warning:  size of swap.c is not 176'
  fi
fi
if rm -fr ${lock_dir}
then ${echo} 'x - removed lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to remove lock directory `'${lock_dir}\''.'
  exit 1
fi
exit 0
